{"version":3,"sources":["assets/images/Apple.png","assets/images/Banana.png","assets/images/Blueberries.png","assets/images/Grape.png","assets/images/Pear.png","assets/images/Strawberrie.png","components/Header.js","modules/CardStateModule.js","components/Card.js","modules/GameStatusModule.js","components/EndOfTheGame.js","components/NavBar.js","modules/FruitModule.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","CardState","Card","props","className","cardOpen","name","onClick","handleClick","src","alt","GameStatus","EndOfTheGame","gameEndMessage","buttonMessage","gameStatus","Fragment","setGameField","prevState","forEach","cell","cardState","setGameScore","setSecondsLeft","initialGameSeconds","setGameStatus","setTimeout","gameFieldInitialState","NavBar","progressBarWidth","secondsLeft","initialProgressBarWidth","useEffect","interval","gameScore","setInterval","prevSeconds","Math","max","clearInterval","style","width","fruits","source","Apple","Banana","Blueberries","Grapes","Pear","Strawberries","GameContainer","concat","sort","random","map","fruit","card","useState","gameField","flipTheCard","index","newGameField","cardClicked","reduce","amountFlipped","firstCardFlipped","find","matchThePair","timeout","clearTimeout","key","toLowerCase","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1c70b730.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Apple.e17283a8.png\";","module.exports = __webpack_public_path__ + \"static/media/Banana.b2205860.png\";","module.exports = __webpack_public_path__ + \"static/media/Blueberries.27936f86.png\";","module.exports = __webpack_public_path__ + \"static/media/Grape.ad1c2684.png\";","module.exports = __webpack_public_path__ + \"static/media/Pear.42e76214.png\";","module.exports = __webpack_public_path__ + \"static/media/Strawberrie.fa8416d4.png\";","import React from \"react\";\n\nfunction Header() {\n  return (\n    <header>\n      <h1>Fruit Memory Game</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","export const CardState = {\n  FACE_DOWN: 0,\n  FACE_UP: 1,\n  MATCHED: 2,\n};\n","import React from \"react\";\nimport { CardState } from \"./../modules/CardStateModule\";\nimport \"./Card.css\";\n\nfunction Card(props) {\n  return (\n    <div\n      className={\n        props.cardOpen === CardState.FACE_UP ||\n        props.cardOpen === CardState.MATCHED\n          ? \"fruit-card flip\"\n          : \"fruit-card\"\n      }\n      // style={\n      //   props.cardOpen === CardState.MATCHED\n      //     ? {\n      //         animation: \"matchingCardsScaled 1s ease-in-out 0.5s\",\n      //         transition: \"opacity 1.5s linear 0.5s\",\n      //         opacity: \"0.7\",\n      //       }\n      //     : {}\n      // }\n      name={props.name}\n      onClick={props.handleClick}>\n      <img className=\"card-face-up\" src={props.src} alt={`${props.name}`}></img>\n      <div className=\"card-face-down\"></div>\n    </div>\n  );\n}\n\nexport default Card;\n","export const GameStatus = {\n  NEW_GAME: 0,\n  GAME_STARTED: 1,\n  GAME_WON: 2,\n  GAME_LOST: 3,\n};\n","import React from \"react\";\nimport { GameStatus } from \"./../modules/GameStatusModule\";\nimport { CardState } from \"./../modules/CardStateModule\";\nimport \"./EndOfTheGame.css\";\n\nexport default function EndOfTheGame(props) {\n  let gameEndMessage;\n  let buttonMessage;\n\n  if (props.gameStatus === GameStatus.GAME_WON) {\n    gameEndMessage = \"YOU DID IT!\";\n    buttonMessage = \"Play again\";\n  } else if (props.gameStatus === GameStatus.GAME_LOST) {\n    gameEndMessage = \"YOUR TIME IS OVER\";\n    buttonMessage = \"Try again\";\n  }\n\n  const resetGame = () => {\n    props.setGameField((prevState) => {\n      prevState.forEach((cell) => (cell.cardState = CardState.FACE_DOWN));\n      return [...prevState];\n    });\n    props.setGameScore(0);\n    props.setSecondsLeft(props.initialGameSeconds);\n    props.setGameStatus(GameStatus.NEW_GAME);\n    setTimeout(() => {\n      props.setGameField(props.gameFieldInitialState);\n    }, 600);\n  };\n\n  return (\n    <React.Fragment>\n      {props.gameStatus === GameStatus.GAME_WON ||\n      props.gameStatus === GameStatus.GAME_LOST ? (\n        <div className=\"game-end-backdrop\">\n          <div className=\"game-end-card\">\n            <h2>{gameEndMessage}</h2>\n            <button className=\"play-again-btn\" onClick={resetGame}>\n              {buttonMessage}\n            </button>\n          </div>\n        </div>\n      ) : null}\n    </React.Fragment>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { GameStatus } from \"./../modules/GameStatusModule\";\nimport \"./NavBar.css\";\n\nexport default function NavBar(props) {\n  let progressBarWidth =\n    (props.secondsLeft * props.initialProgressBarWidth) /\n    props.initialGameSeconds;\n  useEffect(() => {\n    let interval;\n    if (props.gameStatus === GameStatus.GAME_STARTED && props.gameScore !== 6) {\n      interval = setInterval(() => {\n        props.setSecondsLeft((prevSeconds) => {\n          if (props.secondsLeft <= 0) {\n            props.setGameStatus(GameStatus.GAME_LOST);\n            return 0;\n          } else {\n            return Math.max(prevSeconds - 0.2, 0);\n          }\n        });\n      }, 200);\n    }\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [props, progressBarWidth]);\n\n  return (\n    <section className=\"navigation-bar\">\n      <span className=\"game-score\">\n        <h4>SCORE: {props.gameScore}</h4>\n      </span>\n      <div className=\"progress-bar\">\n        <div className=\"progress-bar-container\">\n          <div\n            className=\"progress-bar-filler\"\n            style={\n              props.gameStatus === GameStatus.NEW_GAME\n                ? { width: `${props.initialProgressBarWidth}%` }\n                : { width: `${progressBarWidth}%` }\n            }></div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","import Apple from \"./../assets/images/Apple.png\";\nimport Banana from \"./../assets/images/Banana.png\";\nimport Blueberries from \"./../assets/images/Blueberries.png\";\nimport Grapes from \"./../assets/images/Grape.png\";\nimport Pear from \"./../assets/images/Pear.png\";\nimport Strawberries from \"./../assets/images/Strawberrie.png\";\n\nexport const fruits = [\n  { name: \"Apple\", source: Apple },\n  { name: \"Banana\", source: Banana },\n  { name: \"Blueberries\", source: Blueberries },\n  { name: \"Grapes\", source: Grapes },\n  { name: \"Pear\", source: Pear },\n  { name: \"Strawberries\", source: Strawberries },\n];\n","import React, { useState, useEffect } from \"react\";\nimport Card from \"./Card\";\nimport EndOfTheGame from \"./EndOfTheGame\";\nimport NavBar from \"./NavBar\";\nimport { fruits } from \"./../modules/FruitModule\";\nimport { GameStatus } from \"./../modules/GameStatusModule\";\nimport { CardState } from \"./../modules/CardStateModule\";\nimport \"./GameContainer.css\";\n\nfunction GameContainer() {\n  const initialGameSeconds = 15;\n  const initialProgressBarWidth = 100;\n  const gameFieldInitialState = fruits\n    .concat(fruits)\n    .sort(() => Math.random() - 0.3)\n    .map((fruit) => ({ cardState: CardState.FACE_DOWN, card: fruit }));\n  const [gameField, setGameField] = useState(gameFieldInitialState);\n  const [gameScore, setGameScore] = useState(0);\n  const [secondsLeft, setSecondsLeft] = useState(initialGameSeconds);\n  const [gameStatus, setGameStatus] = useState(GameStatus.NEW_GAME);\n\n  const handleClick = (index) => {\n    // creating a new game deck so that React checks my array with cards\n    const newGameField = [...gameField];\n    flipTheCard(index, newGameField);\n    setGameField(newGameField);\n    setGameStatus(GameStatus.GAME_STARTED);\n  };\n\n  const flipTheCard = (index, newGameField) => {\n    const cardClicked = newGameField[index];\n    if (\n      cardClicked.cardState === CardState.FACE_DOWN &&\n      newGameField.reduce((amountFlipped, cell) => {\n        return cell.cardState === CardState.FACE_UP\n          ? amountFlipped + 1\n          : amountFlipped;\n      }, 0) === 0\n    ) {\n      cardClicked.cardState = CardState.FACE_UP;\n    } else if (\n      cardClicked.cardState === CardState.FACE_DOWN &&\n      newGameField.reduce((amountFlipped, cell) => {\n        return cell.cardState === CardState.FACE_UP\n          ? amountFlipped + 1\n          : amountFlipped;\n      }, 0) === 1\n    ) {\n      const firstCardFlipped = newGameField.find(\n        (card) => card.cardState === CardState.FACE_UP\n      );\n      cardClicked.cardState = CardState.FACE_UP;\n      matchThePair(cardClicked, firstCardFlipped, index);\n    } else {\n      return;\n    }\n  };\n\n  const matchThePair = (cardClicked, firstCardFlipped) => {\n    if (cardClicked.card.name === firstCardFlipped.card.name) {\n      cardClicked.cardState = CardState.MATCHED;\n      firstCardFlipped.cardState = CardState.MATCHED;\n      setSecondsLeft((prevSeconds) => {\n        if (prevSeconds < initialGameSeconds - 1.5) {\n          return prevSeconds + 1.5;\n        } else {\n          return initialGameSeconds;\n        }\n      });\n\n      setTimeout(() => {\n        setGameScore((prevState) => prevState + 1);\n      }, 200);\n    } else {\n      setTimeout(() => {\n        setGameField((prevState) => {\n          prevState.forEach((cell) => {\n            if (cell.cardState === CardState.FACE_UP) {\n              cell.cardState = CardState.FACE_DOWN;\n            }\n          });\n          return [...prevState];\n        });\n      }, 1000);\n    }\n  };\n\n  useEffect(() => {\n    let timeout;\n    if (gameScore === 6) {\n      timeout = setTimeout(() => {\n        setGameStatus(GameStatus.GAME_WON);\n      }, 700);\n    }\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [gameStatus, gameScore]);\n\n  return (\n    <React.Fragment>\n      <NavBar\n        gameScore={gameScore}\n        gameStatus={gameStatus}\n        setGameStatus={setGameStatus}\n        initialGameSeconds={initialGameSeconds}\n        secondsLeft={secondsLeft}\n        setSecondsLeft={setSecondsLeft}\n        initialProgressBarWidth={initialProgressBarWidth}\n      />\n      <section className=\"game-field-container\">\n        {gameField.map((cell, index) => (\n          <Card\n            key={index}\n            name={cell.card.name.toLowerCase()}\n            src={cell.card.source}\n            handleClick={() => handleClick(index)}\n            cardOpen={cell.cardState}\n          />\n        ))}\n      </section>\n      <EndOfTheGame\n        gameStatus={gameStatus}\n        setGameField={setGameField}\n        setGameStatus={setGameStatus}\n        setGameScore={setGameScore}\n        initialGameSeconds={initialGameSeconds}\n        setSecondsLeft={setSecondsLeft}\n        initialProgressBarWidth={initialProgressBarWidth}\n        gameFieldInitialState={gameFieldInitialState}></EndOfTheGame>\n    </React.Fragment>\n  );\n}\n\nexport default GameContainer;\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport GameContainer from \"./components/GameContainer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <GameContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}